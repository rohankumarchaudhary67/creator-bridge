generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String          @unique
  image          String?
  sessionToken   String?
  role           role            @default(NoRole)
  youtubeCreator YouTubeCreator?
  youtubeEditor  YouTubeEditor?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model YouTubeCreator {
  id               String             @id @default(uuid())
  ownerId          String             @unique
  owner            User               @relation(fields: [ownerId], references: [id])
  youtubeChannel   YoutubeChannel[]
  userYoutubeToken UserYoutubeToken[]
  editors          YouTubeEditor[]    @relation("Editor")
  videoRequests    VideoRequest[]     @relation("VideoRequest")
  joinRequest      JoinRequest[]      @relation("Sender")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model YouTubeEditor {
  id                  String           @id @default(uuid())
  ownerId             String           @unique
  owner               User             @relation(fields: [ownerId], references: [id])
  youtuberEnvironment YouTubeCreator[] @relation("Editor")
  video               YouTubeVideo[]   @relation("VideoEditor")
  videoRequests       VideoRequest[]   @relation("VideoRequest")
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model YouTubeVideo {
  id              String         @id @default(uuid())
  editorId        String
  editor          YouTubeEditor  @relation(fields: [editorId], references: [id], name: "VideoEditor")
  videoString     String?
  title           String?
  description     String?
  thumbnailString String?
  category        String?
  tags            String[]   @default([])
  visibility      String?
  status          VideoStatus?
  creatorResponse String?
  videorequest    VideoRequest[] @relation("VideoRequest")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model YoutubeChannel {
  id                 String         @id @default(uuid())
  ownerId            String
  owner              YouTubeCreator @relation(fields: [ownerId], references: [id])
  channelId          String?        @unique
  channelTitle       String?
  channelDescription String?
  subscriberCount    Int?
  videoCount         Int?
  thumbnailUrl       String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model UserYoutubeToken {
  id             String         @id @default(uuid())
  userId         String
  user           YouTubeCreator @relation(fields: [userId], references: [id])
  encryptionKey  String
  accessToken    String
  accessIv       String
  accessAuthTag  String
  refreshToken   String
  refreshIv      String
  refreshAuthTag String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
}

model VideoRequest {
  id         String         @id @default(uuid())
  senderId   String
  sender     YouTubeEditor  @relation(fields: [senderId], references: [id], name: "VideoRequest")
  recieverId String
  reciever   YouTubeCreator @relation(fields: [recieverId], references: [id], name: "VideoRequest")
  videoId    String
  video      YouTubeVideo   @relation(fields: [videoId], references: [id], name: "VideoRequest")
  requestId  String         @unique
  status     VideoStatus
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model JoinRequest {
  id                           String         @id @default(uuid())
  senderId                     String
  sender                       YouTubeCreator @relation("Sender", fields: [senderId], references: [id])
  senderName                   String         @default("")
  senderEmail                  String         @default("")
  senderImage                  String         @default("")
  senderYouTubeChannelName     String         @default("")
  senderYouTubeChannelId       String         @default("")
  senderYouTubeChannelImage    String         @default("")
  senderYouTubeSubscriberCount Int            @default(0)
  requestId                    String         @unique
  recieverEmail                String         @default("")
  status                       JoinStatus
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt
}

enum role {
  Creator
  Editor
  NoRole
}

enum JoinStatus {
  Pending
  Approved
  Rejected
}

enum VideoStatus {
  Pending
  Approved
  Rejected
}
